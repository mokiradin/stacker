import time
import pyupbit
import datetime
import math
import numpy as np


access = "--"
secret = "--"

def get_target(ticker,k):
    df = pyupbit.get_ohlcv(ticker,interval="minutes15")
    df['range'] = (df['high'] - df['low'])
    df['noise'] = 1 - abs(df['open'] - df['close']) / (df['high'] - df['low'])
    df['noise_ma'] = df['noise'].rolling(10).mean()
    df['target'] = df['open'] + df['range'].shift(1) *df['noise_ma']

    hpr = df.iloc[-1]['target']
    return hpr


def get_balance(ticker):
    # """잔고 조회"""
    balances = upbit.get_balances()
    for b in balances:
        if b['currency'] == ticker:
            if b['balance'] is not None:
                return float(b['balance'])
            else:
                return 0

def get_start_time(ticker):
    """시작 시간 조회"""
    df = pyupbit.get_ohlcv(ticker, interval="minutes15", count=1)
    start_time = df.index[0]
    return start_time


def get_current_price(ticker):
    # """현재가 조회"""
    return pyupbit.get_orderbook(tickers=ticker)[0]["orderbook_units"][0]["ask_price"]

# 로그인
upbit = pyupbit.Upbit(access, secret)
print("autotrade start")


# 자동매매 시작
while True:
    try:
        now = datetime.datetime.now()
        start_time = get_start_time("KRW-ETC")
        end_time = start_time + datetime.timedelta(minutes=15)
        

        if start_time < now < end_time - datetime.timedelta(seconds=10):
            target_price = get_target("KRW-ETC",8)
            current_price = get_current_price("KRW-ETC")
            if target_price < current_price:
                krw = get_balance("KRW")
                if krw > 5000:
                    upbit.buy_market_order("KRW-ETC", krw*0.9995)
                    print("buy completed")
                    print(target_price,current_price)
        else:
            have = get_balance("ETC")
            if have > 0.00008:
                upbit.sell_market_order("KRW-ETC", have*0.9995)
                print("sell completed")
                print(target_price,current_price)
        time.sleep(1)
    except Exception as e:
        print(e)
        time.sleep(1)
